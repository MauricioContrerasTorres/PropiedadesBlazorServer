@page "/crear-propiedad"
@using Modelos.DTO
@using PropiedadesBlazor.IRepositorio;
@using PropiedadesBlazor.Servicios;
@inject IPropiedadRepositorio PropiedadRepositorio
@inject ICategoriaRepositorio CategoriaRepositorio
@inject IImagenPropiedadRepositorio ImagenPropiedadRepositorio
@inject NavigationManager navigationManager;
@inject IJSRuntime JsRuntime
@inject ISubidaArchivo SubidaArchivo

<h1 class="text-center">Crear Porpiedad</h1>

<div class="card">
    <div class="card-header">
        <div class="row">
            <div class="col-7">
                <h4 class="card-title text-dark">Nueva Categoría</h4>
            </div>
        </div>
    </div>
    <div class="card-body">
        <EditForm Model="propiedadDTO" OnValidSubmit="@(()=> ManejadorOnCrearPropiedad())">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <ValidationSummary></ValidationSummary>
            <div class="container">
                <div class="form-group">
                    <div class="row">
                        <div class="col-2">
                            <label>Nombre: </label>
                        </div>
                        <div class="col-6">
                            <InputText @bind-Value="propiedadDTO.Nombre" class="form-control" placeholder="Ingresa el nombre"></InputText>
                            <ValidationMessage For="()=>propiedadDTO.Nombre"></ValidationMessage>
                        </div>
                    </div>
                    <br />

                    <div class="row">
                        <div class="col-2">
                            <label>Descripción: </label>
                        </div>
                        <div class="col-6">
                            <InputText @bind-Value="propiedadDTO.Descripcion" class="form-control" placeholder="Ingresa la descripción"></InputText>
                            <ValidationMessage For="()=>propiedadDTO.Descripcion"></ValidationMessage>
                        </div>
                    </div>
                    <br />

                    <div class="row">
                        <div class="col-2">
                            <label>Area: </label>
                        </div>
                        <div class="col-6">
                            <InputNumber @bind-Value="propiedadDTO.Area" class="form-control" placeholder="Ingresa el área"></InputNumber>
                            <ValidationMessage For="()=>propiedadDTO.Area"></ValidationMessage>
                        </div>
                    </div>
                    <br />

                    <div class="row">
                        <div class="col-2">
                            <label>Habitaciones: </label>
                        </div>
                        <div class="col-6">
                            <InputNumber @bind-Value="propiedadDTO.Habitaciones" class="form-control" placeholder="Ingresa las habitaciones"></InputNumber>
                            <ValidationMessage For="()=>propiedadDTO.Habitaciones"></ValidationMessage>
                        </div>
                    </div>
                    <br />
                    <div class="row">
                        <div class="col-2">
                            <label>Baños: </label>
                        </div>
                        <div class="col-6">
                            <InputNumber @bind-Value="propiedadDTO.Banios" class="form-control" placeholder="Ingresa los baños"></InputNumber>
                            <ValidationMessage For="()=>propiedadDTO.Banios"></ValidationMessage>
                        </div>
                    </div>
                    <br />

                    <div class="row">
                        <div class="col-2">
                            <label>Parqueadero: </label>
                        </div>
                        <div class="col-6">
                            <InputNumber @bind-Value="propiedadDTO.Parqueadero" class="form-control" placeholder="Ingresa la parqueadero"></InputNumber>
                            <ValidationMessage For="()=>propiedadDTO.Parqueadero"></ValidationMessage>
                        </div>
                    </div>
                    <br />

                    <div class="row">
                        <div class="col-2">
                            <label>Precio: </label>
                        </div>
                        <div class="col-6">
                            <InputNumber @bind-Value="propiedadDTO.Precio" class="form-control" placeholder="Ingresa el precio"></InputNumber>
                            <ValidationMessage For="()=>propiedadDTO.Precio"></ValidationMessage>
                        </div>
                    </div>
                    <br />
                    <div class="row">
                        <div class="col-2">
                            <label>Activo: </label>
                        </div>
                        <div class="col-6">
                            <InputCheckbox @bind-Value="propiedadDTO.Activo"></InputCheckbox>
                            <ValidationMessage For="()=>propiedadDTO.Activo"></ValidationMessage>
                        </div>
                    </div>
                    <br />

                    <div class="row">
                        <div class="col-2">
                            <label>Categoria: </label>
                        </div>
                        <div class="col-6">
                            <InputSelect @bind-Value="categoriaSeleccionada.Id" class="form-control">
                            <option value="" selected>-- Selecione una categoría--</option>
                            @foreach(var categoria in dropDownCategoriaDTO)
                            {
                                <option value="@categoria.Id">@categoria.NombreCategoria</option>    
                            }
                            </InputSelect>
                            <ValidationMessage For="()=>propiedadDTO.Activo"></ValidationMessage>
                        </div>                   
                    </div>
                    <br />

                    <div class="form-group" style="padding-top:30px; padding-bottom: 30px;"
                        <hr />
                        <h4>Imágenes Propiedad</h4>

                        <InputFile OnChange="ManejadorOnSubidaArchivo" multiple></InputFile>
                    </div>
                    <div class="row">
                        @if (estaInciadoProcesoSubidaImagen)
                        {
                            <div class="col-md-12">
                                <span><i class="bg-info bi-arrow-repeat">Espere mientras suben las imágenes</i></span>
                            </div>
                        }

                        @if(propiedadDTO.UrlImagenes != null && propiedadDTO.UrlImagenes.Count() > 0)
                        {
                            int serial = 1;
                            foreach(var imagenPropiedad in propiedadDTO.UrlImagenes)
                            {
                                <div class="col-md-2 mt-3">
                                    <div class="imagen-propiedad" style="background: url('@imagenPropiedad') 50% 50%">
                                        <span class="titulo-imagen-propiedad">@serial</span>
                                    </div>
                                    <button type="button" @onclick="()=> BorrarImagen(imagenPropiedad)" class="btn btn-outline-danger btn-block mt-4">
                                        borrar
                                    </button>
                                </div>
                                serial++;
                            }
                        }
                    </div>

                    <div class="row">
                        <div class="col-2">
                            <button type="submit" class="btn btn-success"><i class="bi bi-gear-fill"></i>&nbsp;Guardar Propiedad</button>
                        </div>
                        <div class="col-6">
                            <NavLink href="propiedades" class="btn btn-secondary"><i class="bi bi-arrow-left-circle-fill"></i>&nbsp;Volver Atrás</NavLink>
                        </div>
                    </div>


                
                </div>
            </div>
        </EditForm>

    </div>

</div>

@code {
    private PropiedadDTO propiedadDTO = new PropiedadDTO();

    private DropDownCategoriaDTO categoriaSeleccionada = new DropDownCategoriaDTO();

    private IEnumerable<DropDownCategoriaDTO> dropDownCategoriaDTO = new List<DropDownCategoriaDTO>();

    private bool estaInciadoProcesoSubidaImagen = false;

    private ImagenPropiedadDTO imagenDTO;

    protected override async Task OnInitializedAsync()
    {
        dropDownCategoriaDTO = await CategoriaRepositorio.GetDropDownCategorias();
    }

    private async Task ManejadorOnCrearPropiedad()
    {
        var nombrePropiedad = await PropiedadRepositorio.NombrePropiedadExiste(propiedadDTO.Nombre);

        if (nombrePropiedad != null)
        {
            await JsRuntime.ToastrError("El nombre de la propiedad ya existe");
            return;
        }

        //se crea en bdd
        propiedadDTO.CategoriaId = categoriaSeleccionada.Id;

        var crearPropiedad = await PropiedadRepositorio.CrearPropiedad(propiedadDTO);
        await AgregarImagenesPropiedad(crearPropiedad);
        await JsRuntime.ToastrSuccess("Propiedad creada correctamente");

        navigationManager.NavigateTo("propiedades");
    }

    private async Task ManejadorOnSubidaArchivo(InputFileChangeEventArgs e)
    {
        estaInciadoProcesoSubidaImagen = true;
        try
        {
            var imagenes = new List<string>();

            if (e.GetMultipleFiles().Count() > 0)
            {
                foreach (var file in e.GetMultipleFiles())
                {
                    System.IO.FileInfo fileInfo = new FileInfo(file.Name);
                    if (fileInfo.Extension.ToLower() == ".jpg"
                        || fileInfo.Extension.ToLower() == ".png"
                        || fileInfo.Extension.ToLower() == ".jpeg")
                    {
                        var uploadedImagePath = await SubidaArchivo.SubirArchivo(file);
                        imagenes.Add(uploadedImagePath);
                    }
                    else
                    {
                        await JsRuntime.ToastrError("Por favor seleccione .jpg/.png/.jpeg");
                        return;
                    }
                }

                if (imagenes.Any())
                {
                    if (propiedadDTO.UrlImagenes != null && propiedadDTO.UrlImagenes.Any())
                    {
                        propiedadDTO.UrlImagenes.AddRange(imagenes);
                    }
                    else
                    {
                        propiedadDTO.UrlImagenes = new List<string>();
                        propiedadDTO.UrlImagenes.AddRange(imagenes);
                    }
                }
                else
                {
                    await JsRuntime.ToastrError("Fallo la subida de archivos");
                    return;
                }
            }
            estaInciadoProcesoSubidaImagen = false;
        }
        catch (Exception)
        {

            throw;
        }
    }

    internal async Task BorrarImagen(string urlImagen)
    {

        try
        {
            var imageIndex = propiedadDTO.UrlImagenes.FindIndex(x => x == urlImagen);
            var nombreImagen = urlImagen.Replace($"{navigationManager.BaseUri}ImagenesPropiedades/", "");

            if (propiedadDTO.Id == 0)
            {
                var result = SubidaArchivo.BorrarArchivo(nombreImagen);
            }

            propiedadDTO.UrlImagenes.RemoveAt(imageIndex);
        }
        catch (Exception ex)
        {
            await JsRuntime.ToastrError("Fallo la subida de archivos --> "+ex.Message);
            return;
        }




    }

    private async Task AgregarImagenesPropiedad(PropiedadDTO propDTO)
    {
        foreach (var urlImagen in propiedadDTO.UrlImagenes)
        {
            if (propiedadDTO.ImagenPropiedad == null || propiedadDTO.ImagenPropiedad.Where(x => x.UrlImagenPropiedad == urlImagen).Count() == 0)
            {
                imagenDTO = new ImagenPropiedadDTO()
                    {
                        PropiedadId = propDTO.Id,
                        UrlImagenPropiedad = urlImagen
            };

                await ImagenPropiedadRepositorio.CrearPropiedadImagen(imagenDTO);

            }
    }
    }
}
